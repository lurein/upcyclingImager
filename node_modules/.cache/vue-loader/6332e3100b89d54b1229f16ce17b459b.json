{"remainingRequest":"C:\\Users\\lurei\\mde\\upcyclingImager\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lurei\\mde\\upcyclingImager\\src\\App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css&","dependencies":[{"path":"C:\\Users\\lurei\\mde\\upcyclingImager\\src\\App.vue","mtime":1664217570427},{"path":"C:\\Users\\lurei\\mde\\upcyclingImager\\node_modules\\css-loader\\index.js","mtime":1664213841108},{"path":"C:\\Users\\lurei\\mde\\upcyclingImager\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1664213844206},{"path":"C:\\Users\\lurei\\mde\\upcyclingImager\\node_modules\\postcss-loader\\src\\index.js","mtime":1664213842117},{"path":"C:\\Users\\lurei\\mde\\upcyclingImager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664213841924},{"path":"C:\\Users\\lurei\\mde\\upcyclingImager\\node_modules\\vue-loader\\lib\\index.js","mtime":1664213843853}],"contextDependencies":[],"result":["\nhtml,\nbody {\n  height: 100%;\n  font-family: \"Roboto\";\n  background: black;\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";AAmIA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div style=\"position: relative; border: #fffa00 2px solid\">\n      <img :src=\"outline\" />\n      <v-easy-camera\n        v-model=\"picture\"\n        ref=\"picpreview\"\n        :startOnMounted=\"true\"\n        output=\"blob\"\n        overlayMask=\"./assets/outline.svg\"\n      ></v-easy-camera>\n\n      <div\n        style=\"\n          width: 100%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          position: absolute;\n          bottom: 0;\n          left: 0;\n        \"\n      >\n        <button @click=\"cameraAction('start')\">Start</button>\n        <button @click=\"cameraAction('snap')\">Snap</button>\n        <button @click=\"cameraAction('stop')\">Stop</button>\n        <button @click=\"cameraAction('close')\">Close</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport EasyCamera from \"easy-vue-camera\";\n\nexport default {\n  name: \"App\",\n  components: {\n    \"v-easy-camera\": EasyCamera,\n  },\n  data: function () {\n    return {\n      picture: \"\",\n      outline: require('./assets/outline.svg')\n    };\n  },\n  computed: {},\n  methods: {\n    cameraAction(opt) {\n      if (opt === \"start\") {\n        this.$refs.picpreview.start();\n      } else if (opt === \"snap\") {\n        this.$refs.picpreview.snap();\n\n        setTimeout(() => {\n          this.processFile(this.picture);\n        }, 2000);\n      } else if (opt === \"stop\") {\n        this.$refs.picpreview.stop();\n      } else if (opt === \"close\") {\n        this.$refs.picpreview.close();\n      }\n    },\n    processFile(blob) {\n      // read the files\n      var reader = new FileReader();\n\n      if (blob instanceof Blob) {\n        reader.readAsArrayBuffer(blob);\n\n        reader.onload = function (event) {\n          // blob stuff\n          var blob = new Blob([event.target.result]); // create blob...\n          window.URL = window.URL || window.webkitURL;\n          var blobURL = window.URL.createObjectURL(blob); // and get it's URL\n\n          // helper Image object\n          var image = new Image();\n          image.src = blobURL;\n          image.onload = function () {\n            // have to wait till it's loaded\n            var canvas = document.createElement(\"canvas\");\n            var width = image.width;\n            var height = image.height;\n\n            // calculate the width and height, constraining the proportions\n            if (width > height) {\n              if (width > 100) {\n                //height *= max_width / width;\n                height = Math.round((height *= 100 / width));\n                width = 100;\n              }\n            } else {\n              if (height > 100) {\n                //width *= max_height / height;\n                width = Math.round((width *= 100 / height));\n                height = 100;\n              }\n            }\n\n            // resize the canvas and draw the image data into it\n            canvas.width = width;\n            canvas.height = height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(image, 0, 0, width, height);\n\n            canvas.toBlob(function (blob) {\n              const newImg = document.createElement(\"img\");\n              const url = URL.createObjectURL(blob);\n\n              //send this blob to API\n\n              newImg.onload = function () {\n                // no longer need to read the blob so it's revoked\n                URL.revokeObjectURL(url);\n              };\n\n              newImg.src = url;\n              document.body.appendChild(newImg);\n            });\n          };\n        };\n      } else {\n        // console.log(this.picture);\n      }\n    },\n  },\n};\n</script>\n\n<style>\nhtml,\nbody {\n  height: 100%;\n  font-family: \"Roboto\";\n  background: black;\n}\n</style>\n"]}]}